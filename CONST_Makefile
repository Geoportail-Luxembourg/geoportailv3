SITE_PACKAGES = $(shell .build/venv/bin/python -c "import distutils; print(distutils.sysconfig.get_python_lib())" 2> /dev/null)
PYTHON_VERSION = $(shell .build/venv/bin/python -c "import sys; print('%i.%i' % (sys.version_info.major, sys.version_info.minor))" 2> /dev/null)
OL_JS_FILES = $(shell find node_modules/openlayers/src/ol -type f -name '*.js' 2> /dev/null)
NGEO_JS_FILES = $(shell find node_modules/ngeo/src -type f -name '*.js' 2> /dev/null)
APP_JS_FILES = $(shell find geoportailv3/static/js -type f -name '*.js')
APP_HTML_FILES = $(shell find geoportailv3/templates -type f -name '*.html')
APP_PYTHON_FILES = $(shell find geoportailv3/ -type f -name '*.py')
APP_SERVER_LOC_FILES = $(shell find geoportailv3/locale/ -type f -name 'geoportailv3.po')
APP_CLIENT_LOC_FILES = $(shell find geoportailv3/locale/ -type f -name 'geoportailv3-client.po')
LESS_FILES = $(shell find less -type f -name '*.less')
TEMPLATE_EXCLUDE += buildout .build CONST_alembic/script.py.mako print/templates/print.mako
FIND_OPTS = $(foreach ELEM, $(TEMPLATE_EXCLUDE),-path ./$(ELEM) -prune -o) -type f
TEMPLATE_FILES = $(shell find $(FIND_OPTS) -name "*.in" -print 2> /dev/null)
MAKO_FILES = $(shell find $(FIND_OPTS) -name "*.mako" -print 2> /dev/null)
JINJA_FILES = $(shell find $(FIND_OPTS) -name "*.jinja" -print 2> /dev/null)
VARS_FILES += CONST_vars.yaml
CONFIG_VARS += authtkt_cookie_name authtkt_secret sqlalchemy.url auth_replication_enabled \
	sqlalchemy_replication.url schema parentschema enable_admin_interface pyramid_closure.roots \
	pyramid_closure.roots_with_prefix node_modules_path closure_library_path default_locale_name \
	available_locale_names cache admin_interface functionalities external_themes_url \
	external_mapserv_url raster shortener mapserv_url hide_capabilities use_security_metadata \
	print_url tiles_url checker check_collector wfs default_max_age servers
ENVIRONMENT_VARS += INSTANCE_ID=${INSTANCE_ID}
C2C_TEMPLATE_CMD = $(ENVIRONMENT_VARS) .build/venv/bin/c2c-template --vars $(VARS_FILE)

.PHONY: help
help:
	@echo "Usage: make <target>"
	@echo
	@echo "Main targets:"
	@echo
	@echo "- build                Build and configure the project"
	@echo "- check                Perform a number of checks on the code"
	@echo "- serve                Run the development server (pserve)"
	@echo "- clean                Remove generated files"
	@echo "- cleanall             Remove all the build artefacts"
	@echo
	@echo "Secondary targets:"
	@echo
	@echo "- build-web            Build the javascript and the css"
	@echo "- build-server         Build the files required by the server"
	@echo "- compile-catalog      Compile the translation catalog"
	@echo "- flake8               Run flake8 checker on the Python code"
	@echo "- lint                 Check the JavaScript code with linters"
	@echo "- update-node-modules  Update node modules (using --force)"
	@echo

.PHONY: build
build: $(SITE_PACKAGES)/geoportailv3.egg-link update-translations build-web build-server compile-catalog

.PHONY: check
check: flake8 lint build-web

.PHONY: clean
clean:
	rm -f .build/node_modules.timestamp
	rm -f .build/dev-requirements.timestamp
	rm -f .build/venv.timestamp
	rm -f geoportailv3/locale/*.pot
	rm -rf geoportailv3/static/build
	rm -f $(TEMPLATE_FILES:.in=)
	rm -f $(MAKO_FILES:.mako=)
	rm -f $(JINJA_FILES:.jinja=)

.PHONY: cleanall
cleanall: clean
	rm -rf .build
	rm -rf node_modules

.PHONY: build-web
build-web: geoportailv3/static/build/build.js geoportailv3/static/build/build.css geoportailv3/static/build/build.min.css

.PHONY: compile-catalog
compile-catalog: geoportailv3/static/build/locale/fr/geoportailv3.json

.PHONY: flake8
flake8: .build/venv/bin/flake8
	.build/venv/bin/flake8 geoportailv3

.PHONY: build-server
build-server: $(TEMPLATE_FILES:.in=) $(MAKO_FILES:.mako=) $(JINJA_FILES:.jinja=) .build/config.yaml

.PHONY: lint
lint: .build/venv/bin/gjslint .build/node_modules.timestamp .build/gjslint.timestamp .build/jshint.timestamp

.PHONY: serve
serve: build development.ini
	.build/venv/bin/pserve --reload --monitor-restart development.ini

.PHONY: update-node-modules
update-node-modules:
	npm install --force

.PHONY: update-translations
update-translations: $(APP_SERVER_LOC_FILES) $(APP_CLIENT_LOC_FILES)

$(TEMPLATE_FILES:.in=): $(TEMPLATE_FILES) .build/venv/bin/c2c-template ${VARS_FILES}
ifeq ($(origin VARS_FILE), undefined)
	@echo "Error: the variable VARS_FILE is required."
	exit 1
endif
	$(C2C_TEMPLATE_CMD) --engine template --files $@.in

$(MAKO_FILES:.mako=): $(MAKO_FILES) .build/venv/bin/c2c-template ${VARS_FILES}
ifeq ($(origin VARS_FILE), undefined)
	@echo "Error: the variable VARS_FILE is required."
	exit 1
endif
	$(C2C_TEMPLATE_CMD) --engine mako --files $@.mako

$(JINJA_FILES:.jinja=): $(JINJA_FILES) .build/venv/bin/c2c-template ${VARS_FILES}
ifeq ($(origin VARS_FILE), undefined)
	@echo "Error: the variable VARS_FILE is required."
	exit 1
endif
	$(C2C_TEMPLATE_CMD) --engine jinja --files $@.jinja

geoportailv3/closure/%.py: $(CLOSURE_LIBRARY_PATH)/closure/bin/build/%.py
	cp $< $@

geoportailv3/locale/geoportailv3-client.pot: $(APP_HTML_FILES)
	node tasks/extract-messages.js $^ > $@

geoportailv3/locale/geoportailv3.pot: $(APP_PYTHON_FILES) $(APP_HTML_FILES)
	.build/venv/bin/pot-create -c lingua.ini -o geoportailv3/locale/geoportailv3.pot geoportailv3

$(APP_SERVER_LOC_FILES): geoportailv3/locale/geoportailv3.pot
	msgmerge --update $@ geoportailv3/locale/geoportailv3.pot
	msgfmt -o $(basename $@).mo $@

$(APP_CLIENT_LOC_FILES): geoportailv3/locale/geoportailv3-client.pot
	msgmerge --update $@ geoportailv3/locale/geoportailv3-client.pot
	msgfmt -o $(basename $@).mo $@

geoportailv3/static/build/build.js: build.json $(OL_JS_FILES) $(NGEO_JS_FILES) $(APP_JS_FILES) .build/externs/angular-1.3.js .build/externs/angular-1.3-q.js .build/externs/angular-1.3-http-promise.js .build/node_modules.timestamp
	mkdir -p $(dir $@)
	node tasks/build.js $< $@

geoportailv3/static/build/build.min.css: $(LESS_FILES) .build/node_modules.timestamp
	mkdir -p $(dir $@)
	./node_modules/.bin/lessc --clean-css less/geoportailv3.less $@

geoportailv3/static/build/build.css: $(LESS_FILES) .build/node_modules.timestamp
	mkdir -p $(dir $@)
	./node_modules/.bin/lessc less/geoportailv3.less $@

geoportailv3/static/build/locale/fr/geoportailv3.json: geoportailv3/locale/fr/LC_MESSAGES/geoportailv3-client.po
	mkdir -p $(dir $@)
	node tasks/compile-catalog $< > $@

.build/externs/angular-1.3.js:
	mkdir -p $(dir $@)
	wget -O $@ https://raw.githubusercontent.com/google/closure-compiler/master/contrib/externs/angular-1.3.js
	touch $@

.build/externs/angular-1.3-q.js:
	mkdir -p $(dir $@)
	wget -O $@ https://raw.githubusercontent.com/google/closure-compiler/master/contrib/externs/angular-1.3-q.js
	touch $@

.build/externs/angular-1.3-http-promise.js:
	mkdir -p $(dir $@)
	wget -O $@ https://raw.githubusercontent.com/google/closure-compiler/master/contrib/externs/angular-1.3-http-promise.js
	touch $@

.build/externs/jquery-1.9.js:
	mkdir -p $(dir $@)
	wget -O $@ https://raw.githubusercontent.com/google/closure-compiler/master/contrib/externs/jquery-1.9.js
	touch $@

.build/node_modules.timestamp: package.json
	mkdir -p $(dir $@)
	npm install
	touch $@

.build/gjslint.timestamp: $(APP_JS_FILES)
	.build/venv/bin/gjslint --jslint_error=all --strict --custom_jsdoc_tags=event,fires,function,classdesc,api,observable $?
	touch $@

.build/jshint.timestamp: $(APP_JS_FILES)
	./node_modules/.bin/jshint --verbose $?
	touch $@

.build/venv/bin/gjslint: .build/dev-requirements.timestamp

.build/venv/bin/flake8: .build/dev-requirements.timestamp

.build/venv/bin/c2c-template: .build/dev-requirements.timestamp

.build/dev-requirements.timestamp: .build/venv.timestamp dev-requirements.txt
	.build/venv/bin/pip install -r dev-requirements.txt > /dev/null 2>&1
	touch $@

.build/venv.timestamp:
	mkdir -p $(dir $@)
	virtualenv --no-site-packages .build/venv
	touch $@

$(SITE_PACKAGES)/geoportailv3.egg-link: .build/venv.timestamp setup.py \
		requirements.txt \
		$(SITE_PACKAGES)/setuptools_git-1.1-py$(PYTHON_VERSION).egg-info/PKG-INFO
	.build/venv/bin/pip install -r requirements.txt
	touch -m $@ | true

# We manually install nosexcover and setuptools_git because of
# https://github.com/Geoportail-Luxembourg/geoportailv3/issues/83
$(SITE_PACKAGES)/setuptools_git-1.1-py$(PYTHON_VERSION).egg-info/PKG-INFO:
	.build/venv/bin/pip install "setuptools_git==1.1"

.build/config.yaml: .build/venv/bin/c2c-template ${VARS_FILES}
	$(C2C_TEMPLATE_CMD) --get-config $@ $(CONFIG_VARS)
